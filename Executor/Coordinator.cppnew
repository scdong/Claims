/*
 * Coordinator.cpp
 *
 *  Created on: Aug 8, 2013
 *      Author: wangli
 */

#include "Coordinator.h"
#include <libconfig.h++>
#include <netdb.h>
#include <sys/socket.h>
#include <iostream>
#include <ostream>
#include <sstream>
#include <arpa/inet.h>
#include <stdio.h>
#include "../Debug.h"
#include "../Message.h"
Coordinator::Coordinator() {
	// TODO Auto-generated constructor stub
	if(PrepareTheSocket()==false){
		std::cout<<"Error occurs during the socket prepare!"<<std::endl;
		return;
	}
	if(SetupTheTheron()==false){
		std::cout<<"Error occurs during the Theron setup!"<<std::endl;
		return;
	}

	if(CreateListeningThread()==false){
		std::cout<<"Error occurs during creating listening thread!"<<std::endl;
		return;
	}

}

Coordinator::~Coordinator() {
	// TODO Auto-generated destructor stub
	framework->~Framework();
	endpoint->~EndPoint();
	coordinateActor->~Actor();
}
bool Coordinator::PrepareTheSocket(){
	libconfig::Config cfg;
	cfg.readFile("/home/claims/config/wangli/coor.conf");
	std::string master_ip=(const char *)cfg.lookup("coordinator.ip");
	std::string master_port=(const char*)cfg.lookup("coordinator.port");

	struct hostent* host;
	struct sockaddr_in my_addr;

	if((socket_fd = socket(AF_INET, SOCK_STREAM,0))==-1)
	{
		perror("socket create errors!\n");
		return false;
	}
	my_addr.sin_family=AF_INET;
	my_addr.sin_port=htons(atoi(master_port.c_str()));
	std::cout<<"Socket port:"<<master_port<<std::endl;
	my_addr.sin_addr.s_addr = INADDR_ANY;
	bzero(&(my_addr.sin_zero),8);

	/* Enable address reuse */
	int on=1;
	setsockopt(socket_fd, SOL_SOCKET,SO_REUSEADDR, &on, sizeof(on));

	if(bind(socket_fd,(struct sockaddr *)&my_addr, sizeof(struct sockaddr))==-1)
	{
		perror("bind errors!\n");
		return false;
	}

	if(listen(socket_fd, 30)==-1)
	{
		perror("listen errors!\n");
		return false;
	}

#ifdef DEBUG_Coordinator
	std::cout<<"Coordinator: PrepareTheSocket() is successful."<<std::endl;
#endif
	return true;
}
bool Coordinator::SetupTheTheron(){
	libconfig::Config cfg;
	cfg.readFile("/home/claims/config/wangli/master.conf");
	EndPointPort=(const char *)cfg.lookup("TheronPort.Coordinator");
	std::string master_ip=(const char *)cfg.lookup("ip");
	std::string ip_port;
	ip_port=std::string("tcp://")+master_ip.c_str()+":"+EndPointPort.c_str();
#ifdef DEBUG_Coordinator
	std::cout<<"[Coordinator]: Now is initializing the Theron EndPoint as "<<ip_port<<std::endl;
#endif
	endpoint=new Theron::EndPoint((master_ip+":"+EndPointPort).c_str(),ip_port.c_str());

	framework=new Theron::Framework(*endpoint);
	framework->SetMaxThreads(3);

#ifdef DEBUG_Coordinator
	std::cout<<"[Coordinator]: Now is initializing The CoordinatorActor"<<std::endl;
#endif
	//coordinateActor=new Coordinator::CoordinateActor(framework,("CoordinateActor://"+master_ip+":"+EndPointPort).c_str());

	return true;

}
bool Coordinator::CreateListeningThread(){
	pthread_t prochaseId;

	const int error=pthread_create(&prochaseId,NULL,ListeningNewNode,this);
#ifdef DEBUG_Coordinator
	std::cout<<"[Coordinator]: The listening thread is created!"<<std::endl;
#endif
	return error==0;
}

void* Coordinator::ListeningNewNode(void *arg){

	std::cout<<"Listen!"<<std::endl;
	Coordinator* Cthis=(Coordinator*)arg;
	while(true){
		socklen_t sin_size=sizeof(struct sockaddr_in);
		struct sockaddr_in remote_addr;
		int socket_fd_new;
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: I'm waiting for the new node's connection!"<<std::endl;
#endif
		if((socket_fd_new=accept(Cthis->socket_fd, (struct sockaddr*)&remote_addr,&sin_size))==-1)
		{
			perror("accept errors!\n");
			return false;
		}
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: New Node is connected! Waiting for the port infor.."<<std::endl;
#endif
		/*Set the timeout value, which is essential to guarantee the correctness when
		 * there are more nodes trying to connect the coordinate at the same time.  */
		struct timeval timeout={1,0};
		setsockopt(socket_fd_new,SOL_SOCKET,SO_RCVTIMEO,(char*)&timeout,sizeof(struct timeval));

		int recvbytes;
		int port;

		if((recvbytes=recv(socket_fd_new,&port,sizeof(port),MSG_WAITALL))==-1)
		{
			std::cout<<"New node "<<inet_ntoa(remote_addr.sin_addr)<<" has connected, but the receiving the information times out!"<<std::endl;
			close(socket_fd_new);
			continue;
			//return false;
		}
		if(recvbytes!=sizeof(int)){
			std::cout<<"Information received, but the length is not right!"<<std::endl;
			close(socket_fd_new);
			continue;
		}
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: The EndPoint of the new node is"<<inet_ntoa(remote_addr.sin_addr)<<":"<<port<<std::endl;
#endif

		if(!Cthis->SendCoordinatorEndPointPort(socket_fd_new)){
			continue;
		}

		std::ostringstream ost;
		ost<<port;
		std::string new_node_ip=inet_ntoa(remote_addr.sin_addr);
		std::string new_node_port=ost.str();

		if(!Cthis->endpoint->Connect(("tcp://"+new_node_ip+":"+new_node_port).c_str())){
			std::cout<<"Error occurs when the Coordinator EndPoint is connecting to the EndPoint of the new node:";
			std::cout<<" tcp://"+new_node_ip+":"+new_node_port<<std::endl;
		}
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: The Coordinator EndPoint has successfully connected to the EndPoint of the new node!"<<std::endl;
#endif

		Theron::Receiver receiver(*Cthis->endpoint);
		Theron::Catcher<int> resultCatcher;
		receiver.RegisterHandler(&resultCatcher, &Theron::Catcher<int>::Push);
		const int TimeOut=1000;//ms

		/**
		 * TODO: In the current version, the Coordinator will repeatedly send
		 * message to each NodeConnectionActor until the feedback is received
		 * which means the target node has conducted new connection based on
		 * message received.
		 * However, if the target node is dead, the message will be sent repeatedly
		 * and infinitely. Additional code is needed to handle the dead node.
		 */
		for(unsigned i=0;i<Cthis->PeersIpPort.size();i++){
			NodeConnectionMessage new_NCM(new_node_ip,new_node_port);
			NodeConnectionMessage old_NCM(Cthis->PeersIpPort[i].first,Cthis->PeersIpPort[i].second);
			receiver.Reset();
			Cthis->framework->Send(NodeConnectionMessage::serialize(new_NCM),
									receiver.GetAddress(),
									Theron::Address(("ConnectionActor://"+old_NCM.ip+":"+old_NCM.port).c_str()));
			while(receiver.Wait(1,TimeOut)!=1){
			Cthis->framework->Send(NodeConnectionMessage::serialize(new_NCM),
									receiver.GetAddress(),
									Theron::Address(("ConnectionActor://"+old_NCM.ip+":"+old_NCM.port).c_str()));
			}

			receiver.Reset();

			Cthis->framework->Send(NodeConnectionMessage::serialize(old_NCM),
									receiver.GetAddress(),
									Theron::Address(("ConnectionActor://"+new_NCM.ip+":"+new_NCM.port).c_str()));
			while(receiver.Wait(1,TimeOut)!=1){
				Cthis->framework->Send(NodeConnectionMessage::serialize(old_NCM),
										receiver.GetAddress(),
										Theron::Address(("ConnectionActor://"+new_NCM.ip+":"+new_NCM.port).c_str()));
			}
		}

		Cthis->PeersIpPort.push_back(std::pair<std::string,std::string>(new_node_ip,new_node_port));
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: New node "<<new_node_ip<<":"<<new_node_port<<"is successfully added to the Theron communication network!"<<std::endl;
#endif

		Cthis->SendReadyNotificationToNewNode(socket_fd_new);


	}
}
bool Coordinator::SendNodeStatusToNewNode(int socket_now_node){

}
bool Coordinator::SendCoordinatorEndPointPort(int socket_new_node){
	int port=atoi(EndPointPort.c_str());
	if(!send(socket_new_node,&port,sizeof(int),0)){
		std::cout<<"Error occurs when sending the Coordinate EndPoint port to the new node!"<<std::endl;
	}
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: The Coordinator EndPoint port ["<<port<<"] is sent to the new node!"<<std::endl;
#endif
	return true;
}
Coordinator::CoordinateActor::CoordinateActor(Theron::Framework *framework, const char* Name):Actor(*framework,Name){

}
bool Coordinator::SendReadyNotificationToNewNode(int socket_new_node){
	char signal='R';
	if(!send(socket_new_node,&signal,sizeof(char),0)){
		std::cout<<"Error occurs when sending the Coordinate EndPoint port to the new node!"<<std::endl;
	}
#ifdef DEBUG_Coordinator
		std::cout<<"[Coordinator]: The 'Ready' signal is sent to the new node!"<<std::endl;
#endif
	return true;
}
