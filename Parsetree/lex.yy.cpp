
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 292
#define YY_END_OF_BUFFER 293
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1225] =
    {   0,
        0,    0,    0,    0,    0,    0,  293,  291,  290,  290,
      248,  291,  285,  248,  248,  291,  248,  248,  248,  231,
      231,  291,  251,  255,  252,  291,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  291,  248,  289,  289,  274,  253,    0,  243,
      241,    0,  285,  249,    0,  242,  240,    0,    0,  233,
        0,  287,  232,  231,    0,    0,    0,  284,  259,  256,
      254,  257,  260,    0,  277,    0,    0,  274,  274,  274,
      274,  274,    9,  274,  274,    0,  274,  274,  274,  274,

      274,   20,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   88,  274,
       90,   99,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  134,  274,  139,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  201,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,    0,  274,  274,  274,    0,  276,
        0,  250,  288,  274,    0,    0,  241,    0,    0,    0,

      240,    0,  286,    0,  236,  232,    0,  246,    0,  234,
      245,  258,    0,  281,    0,  283,    0,  282,    1,    2,
      274,  274,    6,    7,  274,   10,  274,  271,    0,  274,
      274,  274,  274,  274,   16,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,   43,   50,  274,  274,  274,  274,  274,   60,  274,
      274,  274,  274,  274,  274,   67,  274,  274,  274,  274,
      274,  274,  274,   75,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,   96,  274,
      274,  103,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  274,  273,  274,  274,  274,  272,  127,
      274,  274,  130,  274,  274,  274,  274,  274,  141,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  174,  274,  274,  274,  274,
      274,  274,  181,  188,  274,  274,  274,  270,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  211,  274,  274,  274,
      274,  274,  274,  274,  274,  274,    0,  226,  274,  274,
      275,    5,    0,  241,    0,  240,  286,    0,  235,  278,

      280,  279,  274,  274,  274,  274,  247,  274,  274,  274,
      274,  274,   17,   18,  274,   21,  274,   23,  274,  274,
       25,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,   44,  274,  274,  274,
      274,  274,   55,  274,  274,  274,   62,   63,  274,   64,
       65,   68,  274,  274,   71,  274,  274,  274,  274,  274,
      274,   78,  274,  274,  274,   82,  274,  274,   46,  274,
      274,  274,  274,  274,  274,  199,  176,   96,   14,  274,
       98,  274,  101,  104,  105,  274,  274,  108,  109,  274,
      274,  112,  274,  115,  116,  119,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  132,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  152,  154,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  175,  274,  177,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  195,  196,
      197,  274,  274,  274,  274,  237,  204,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  222,  220,  274,  274,  224,  274,  244,  227,  274,
        0,    0,    0,    0,    3,  274,  274,  274,  274,  230,

      274,  274,  274,   19,  274,  267,  274,  274,   26,  274,
      274,  274,  274,  274,  274,  274,  274,  269,  274,   35,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  239,
       73,   74,   76,  274,  274,   80,   81,  274,  274,  274,
      274,  102,  274,   92,   93,  274,  274,  274,  274,  274,
      274,  107,  110,  111,  274,  274,  274,  274,  121,  274,
      274,  274,  274,  274,  228,  274,  274,  274,  274,  274,
      274,  140,  142,  274,  274,  274,  274,  274,  274,  149,
      274,  150,  153,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  165,  156,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  191,  274,  274,  274,  274,
      274,  274,  274,  262,  205,  274,  274,  274,  274,  274,
      274,  210,  212,  274,  274,  216,  274,  274,  274,  221,
      223,  225,  274,  274,    8,  274,   12,  274,   15,  274,
       24,  274,  274,  274,   28,  274,  274,  274,  274,  274,
       34,  274,   40,  274,  274,  274,  274,  274,  274,  274,
      274,   54,  274,  274,  274,   61,  274,   66,  274,   70,
      274,   74,  274,  274,   83,  274,  274,  274,   89,   91,

      274,   95,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,   48,  274,  274,  274,  133,  274,  274,
      137,  274,  274,  274,  274,  274,  274,  274,  274,  156,
      274,  158,  159,  274,  274,  274,  163,  164,  166,  167,
      168,   49,  171,  274,  274,  274,  178,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  192,  274,
      274,  274,  274,  274,  274,  274,  206,  274,  207,  274,
      209,  265,  274,  274,  216,  274,  274,  274,  274,    4,
      274,   13,   22,  274,  274,   27,   29,  274,  274,  274,
       33,  274,  274,  274,  274,  274,   50,   51,   52,   53,

      274,  274,  274,  274,   69,   72,   77,  274,  274,  274,
      274,  274,   96,  274,  100,  106,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  129,  274,   50,
      274,  274,  143,  274,  274,  146,  274,  274,  151,  274,
      157,  160,  161,  274,  169,  274,  274,  274,  274,  179,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  261,
      274,  274,  274,  274,  274,  274,  203,  238,  274,  274,
      274,  274,  218,  219,  274,  274,  274,  274,  274,  274,
       32,  268,  274,   41,   45,  274,  274,   56,  274,   58,
      274,   79,  274,  274,  274,  274,  274,   97,  274,  117,

      118,  274,  274,  274,  274,  274,  274,  274,  274,  128,
      274,  136,  274,  274,  274,  274,  274,  274,  162,  274,
      274,  274,  180,  274,  183,  274,  274,  274,  274,  189,
      274,  274,  274,  274,  274,  200,  202,  208,  213,  214,
      274,  274,  229,  274,   25,  266,   30,  274,  274,  274,
      274,   42,  263,  264,  274,  274,  135,  274,  274,  274,
      274,  274,  113,  274,  274,  123,  274,  274,  123,  274,
      274,  274,  274,  274,  145,  147,  274,  274,  274,  172,
      173,  274,  274,  274,  274,  274,  274,  274,  193,  274,
      198,  274,  217,  274,  274,   31,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  122,  124,
      274,  274,  274,  274,  138,  274,  148,  155,  274,  274,
      184,  274,  274,  274,  274,  194,  274,  274,  274,  274,
      274,  274,  274,   59,  274,  274,   86,   87,   94,  274,
      274,   47,  274,  274,  274,  144,  274,  274,  274,  274,
      274,  274,  274,  274,  274,   36,   37,   39,  274,  274,
      274,  274,  120,  274,  274,  274,  274,  182,  274,  274,
      274,  274,  274,  218,  274,  274,   57,   84,  274,  274,
      274,  126,  274,  274,  274,  274,  274,  190,  215,   11,
      274,  274,  114,  274,  274,  274,  185,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,   85,  274,  274,
      274,  274,  187,   38,  274,  274,  274,  274,  125,  131,
      170,  274,  186,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[1245] =
    {   0,
        0,    0,  670,  665,   56,   57,  615, 2652, 2652, 2652,
      581,   83,    0, 2652,  595,   84,  588,   78,  577,  125,
       87,  560,   65, 2652,   67,  106,  175,  244,  121,  123,
      162,  216,   56,   93,  248,   61,  175,  227,  243,  125,
      258,  274,   64,  297,  341,  387,  320,   95,  281,  118,
      138,  143,  212,  486, 2652,  491,  431, 2652,  267, 2652,
      500,  347,    0, 2652,  123, 2652,  490,  171,  496,  417,
      446, 2652,  464,  495,  100,  515,    0, 2652, 2652,  462,
     2652, 2652, 2652,  443,  212,  430,  428,    0,  160,  302,
      181,  167,  201,  202,  293,  107,  393,  477,  301,  306,

      312,    0,  382,  347,  502,  332,  332,  395,  515,  444,
      332,  349,  495,  394,  379,  444,  443,  503,  458,  473,
      489,  499,  509,  516,  536,  517,  523,  510,    0,  524,
      567,    0,  544,  545,  530,  549,  568,  578,  594,  552,
      566,  590,  592,  565,  599,  600,    0,  587,  624,  609,
      612,  634,  613,  631,  678,  627,  635,  633,  634,  643,
      690,  637,  652,  673,  698,  642,  650,  687,  694,  687,
      724,  696,  698,    0,  737,  740,  739,  752,  742,  738,
      742,  755,  734,  753,    0,  745,  764,  750,  819, 2652,
      427, 2652, 2652,  795,  389,  824,  825,  828,  387,  829,

      833,  834,    0,  839,  845,  872,  888,  239,  878,  894,
        0, 2652,  117, 2652,  124, 2652,  190, 2652,    0,    0,
      764,  801,    0,    0,  809,    0,  800,    0,  477,  803,
      812,  801,  867,  889,    0,  889,  884,  888,  882,  892,
      882,  895,  887,  889,  889,  913,  893,  907,  890,  895,
      910,    0,  936,  917,  948,  931,  945,  931,    0,  950,
      938,  943,  944,  949,  953,    0,  946,  959,  946,  955,
      949,  966,  969,  968,  959,  963,  962,  969,  983,  983,
      985,  985,  991, 1002,  999, 1004,  989, 1006, 1036,  995,
     1000,  996, 1004, 1025,  997, 1018, 1015, 1020, 1022, 1048,

     1026, 1018,  356, 1045,    0, 1041, 1038, 1053, 1039, 1052,
     1044, 1044,    0, 1043, 1055, 1066, 1060, 1067, 1068, 1055,
     1078, 1069, 1081, 1076, 1069, 1089, 1095, 1100, 1101, 1103,
     1108, 1110, 1093, 1097, 1097, 1104, 1115, 1113, 1113, 1110,
     1122, 1114, 1125, 1112, 1131,    0, 1110, 1127, 1135, 1140,
     1122, 1142, 1144,    0, 1132, 1156, 1145,    0, 1153, 1150,
     1160, 1155, 1162, 1172, 1155, 1172, 1175, 1178, 1169, 1170,
     1175, 1175, 1182, 1196, 1193, 1192,    0, 1186,  352, 1180,
     1219, 1192, 1217, 1195, 1200, 1203,  389,    0, 1206, 1210,
     2652,    0,  693,  792,  435,  682,    0, 1248, 1275, 2652,

     2652, 2652, 1215, 1209, 1231,  305, 2652, 1228, 1233, 1243,
     1235, 1237,    0,    0, 1251,    0, 1256,    0,  348, 1251,
     1258, 1250, 1266, 1271, 1266, 1275, 1272, 1262, 1274, 1284,
     1271, 1272, 1274, 1289, 1280, 1294, 1277, 1285, 1298, 1281,
     1278, 1284, 1288, 1289, 1304, 1302,    0,    0, 1306,    0,
     1307,    0, 1301, 1299,    0, 1328, 1325, 1326, 1317, 1333,
     1330,    0, 1320, 1321, 1331,    0, 1335,  299,  292, 1332,
     1327, 1340, 1335, 1334, 1342,    0,    0,    0,    0, 1354,
        0, 1354,    0,    0,    0, 1348, 1357,    0,    0, 1344,
     1346,    0, 1359,    0, 1372,    0, 1357, 1367, 1356, 1372,

     1376, 1375, 1390, 1389, 1380, 1381,    0, 1400, 1389, 1395,
     1391, 1393, 1403, 1404, 1405, 1414, 1413, 1414, 1415, 1402,
     1412, 1410,    0, 1412, 1407, 1431, 1420, 1434, 1444, 1437,
     1432, 1435, 1443, 1435, 1451, 1436, 1451, 1452, 1452, 1464,
     1459, 1451,    0, 1458,    0, 1458, 1463, 1464, 1452, 1457,
     1477, 1485, 1460, 1472, 1469, 1485, 1476, 1484,    0,    0,
     1484, 1503, 1496, 1504,  333,    0,    0, 1499, 1493, 1500,
     1518, 1517, 1505, 1508, 1522, 1521, 1525, 1525, 1522, 1526,
     1526,    0,    0, 1531, 1533,    0, 1534, 2652,    0, 1540,
      876, 1569, 1565, 1566,    0, 1525, 1557, 1553, 1561,    0,

     1564, 1550, 1546,    0, 1568, 2652, 1568, 1573,    0, 1558,
     1558, 1565, 1567, 1562, 1565, 1570, 1567,    0, 1581,    0,
     1573, 1570, 1588, 1585, 1602, 1596, 1586, 1597, 1614, 1615,
     1613, 1611, 1611, 1622, 1625, 1623, 1625, 1612, 1625,    0,
        0,  316,    0, 1628, 1631,    0,    0, 1630, 1623, 1627,
     1636,    0, 1637,    0,    0, 1624, 1624, 1640, 1625, 1632,
     1641,    0,    0,    0, 1641, 1650, 1662, 1659,    0, 1665,
     1660, 1675, 1677, 1674,    0, 1684, 1677, 1669, 1679, 1680,
     1678,    0,    0, 1681, 1674, 1676, 1679, 1694, 1696,    0,
     1695,    0,    0, 1696, 1686, 1684, 1699, 1685, 1707, 1695,

     1710, 1706, 1720,    0,    0, 1719, 1731, 1736, 1734, 1720,
     1721, 1742, 1735, 1740, 1745, 1741, 1747, 1750, 1734, 1744,
     1754, 1743, 1748, 1751, 1741, 1741, 1743, 1748, 1743, 1754,
     1766, 1768, 1773, 2652,    0, 1778, 1770, 1783, 1781, 1791,
      329,    0,    0, 1797, 1790, 1782, 1788, 1802, 1790,    0,
        0,    0, 1796, 1803,    0, 1795,    0, 1796,    0, 1806,
        0, 1793, 1811, 1810,    0, 1796, 1808, 1817, 1798, 1800,
        0, 1801,    0, 1807, 1816, 1831, 1815, 1829, 1846, 1832,
     1849,    0, 1852, 1847, 1854,    0, 1858,    0, 1856,    0,
     1847,    0, 1848, 1839,    0, 1848, 1858, 1863,    0,    0,

     1860,    0, 1853, 1871, 1868, 1867, 1866, 1861, 1853, 1869,
     1906, 1879, 1878,  279, 1888, 1882, 1879,    0, 1906, 1884,
     1910, 1907, 1905, 1908, 1893, 1898, 1900, 1903, 1910,    0,
     1920,    0,    0, 1922, 1924, 1927,    0,    0,    0,    0,
     1912,  252,    0, 1923, 1913, 1920,    0, 1923, 1927, 1937,
     1925, 1937, 1945, 1945, 1965, 1953, 1960, 1985,    0, 1969,
     1971, 1972, 1955, 1952, 1963, 1960,    0, 1965,    0, 1977,
        0, 2652, 1963, 1971,    0, 1984, 1969, 1981, 1977,    0,
     1987,    0,    0, 1986, 1987,    0,    0, 1978, 1989, 1995,
      286,  219, 1998, 2004, 2006, 2013,    0,    0,    0,    0,

     2019, 2011, 2006, 2008,    0,    0,    0, 2010, 2022, 2031,
     2030, 2015,    0, 2024,    0,    0, 2024, 2038, 2021, 2027,
     2031, 2032, 2042, 2045, 2035, 2037, 2032,    0, 2047,    0,
     2053, 2049,    0, 2052, 2053,    0, 2055, 2073,    0, 2080,
        0,    0,    0, 2064,    0, 2073, 2066, 2074, 2071,    0,
     2089, 2077, 2089, 2086,  212, 2095, 2087, 2093, 2081, 2652,
     2089, 2086, 2085, 2093, 2087, 2101,    0,    0, 2105, 2105,
     2109, 2098, 2118,    0, 2113, 2108, 2113,  254, 2126, 2127,
        0, 2652, 2138, 2125,    0,  240,  223,    0, 2137, 2129,
     2144,    0, 2135, 2133, 2131, 2138, 2147,    0, 2152,    0,

        0, 2143, 2147, 2143, 2140, 2150, 2146, 2158, 2163,    0,
      174,    0, 2160, 2160, 2163, 2178, 2169, 2184,    0, 2189,
     2194, 2182,    0, 2182,    0, 2190, 2187,  171, 2195,    0,
      132, 2201, 2184, 2205, 2195,    0,    0,    0,    0, 2195,
     2190, 2213,    0, 2212,    0, 2652,    0, 2199, 2219, 2212,
     2203,    0, 2652, 2652, 2204, 2209,    0, 2207, 2211, 2210,
     2218, 2213, 2222, 2233, 2245,    0, 2236, 2243,    0, 2255,
     2257, 2242, 2238, 2260,    0,    0, 2252, 2248, 2265,    0,
        0, 2260, 2265, 2268, 2268,  124, 2265,  161,    0, 2273,
        0, 2258,    0, 2259, 2267,    0, 2261, 2269, 2278, 2264,

     2265, 2281, 2274, 2294, 2296, 2300, 2294, 2295,    0,    0,
     2312, 2300, 2305, 2306,    0, 2319,    0,    0, 2306, 2310,
        0, 2307, 2312, 2312, 2316,    0, 2331, 2328, 2330, 2331,
     2332, 2320, 2330,    0, 2320, 2336,    0,    0,    0, 2341,
     2321,    0, 2333, 2337,  106,    0, 2342, 2344, 2342, 2351,
     2368, 2365, 2363, 2360, 2365,    0, 2362,    0, 2379, 2358,
     2381, 2372,    0, 2369, 2385, 2388, 2372,    0, 2381, 2380,
     2376, 2382, 2381,    0, 2378, 2379,    0,    0, 2385, 2388,
     2401,    0, 2400, 2410, 2396, 2417, 2409,    0,    0,    0,
     2430, 2418,    0, 2431, 2422, 2434,    0,   81, 2427, 2427,

     2437, 2427, 2431, 2431, 2429, 2428, 2433,    0, 2437, 2437,
     2439, 2439,    0,    0, 2451, 2449, 2453, 2435,    0,    0,
        0, 2443,    0, 2652, 2518, 2526, 2534, 2542, 2548, 2551,
     2558, 2565, 2573,  125, 2581, 2589, 2597,  109, 2604, 2611,
     2619, 2627, 2635, 2643
    } ;

static yyconst flex_int16_t yy_def[1245] =
    {   0,
     1224,    1, 1225, 1225,    1,    1, 1224, 1224, 1224, 1224,
     1224, 1226, 1227, 1224, 1224, 1228, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1229, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1231, 1224, 1224, 1224, 1230, 1224, 1226, 1224,
     1224, 1232, 1227, 1224, 1228, 1224, 1224, 1233, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1234, 1224, 1224, 1224,
     1224, 1224, 1224, 1235, 1229, 1236, 1237, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1238, 1230, 1230, 1230, 1231, 1224,
     1239, 1224, 1224, 1230, 1240, 1226, 1226, 1232, 1241, 1228,

     1228, 1233, 1242, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1234, 1224, 1235, 1224, 1236, 1224, 1237, 1224, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1238, 1230, 1230, 1230,
     1224, 1230, 1243, 1240, 1244, 1241, 1242, 1224, 1224, 1224,

     1224, 1224, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230,
     1240, 1243, 1241, 1244, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1224,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1224, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1224, 1230, 1230, 1230, 1230,
     1230, 1230, 1224, 1224, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,

     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230,    0, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_nxt[2736] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   14,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    8,    8,   53,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   54,   57,   57,   60,   66,   61,   79,   80,
       81,   82,   83,   67,   70,   70,   70,   70,   70,   70,

      125,   73,  134,   74,   74,   74,   74,   74,   74,   71,
       84,  154,   57,   57,  387,   86,  208,  208,   76,  214,
      126,  400,  180,  229,  229,   66,  216,  185,  127,  125,
      211,  134,   67,  401,  128, 1205,   62,   68,   71,   73,
      154,   74,   74,   74,   74,   74,   74,   76,  103,  126,
      108,  180,  144,   75,  109,  104,   76,  127,  110,  186,
     1166,   87,  105,  128,  111,  106,  145,  112,  107,  187,
      113,  960,  146,   66,  188,   77,   68,  103, 1124,  108,
      201,  144,   75,  109,  104,   76, 1087,  110,  186,  114,
      219,  105,  218,  111,  106,  145,  112,  107,  187,  113,

      115,  146,  116,  188,   77,   89,  135,  117,  222,  225,
      136,  223,  118,   90,  190,   91, 1224,   92,  114,  219,
       93, 1224,   94,   95,  202, 1085,  191,  191, 1072,  115,
      226,  116,  224, 1054,   89,  135,  117,  222,  225,  136,
      223,  118,   90,  119,   91,  402,   92,  120,  227,   93,
     1053,   94,   95,   96,  121,  208,  208,  122,  137,  226,
      123,  224,  138,  124, 1046,  191, 1027, 1224,  139,   60,
      140,   61,  119,  983,  141,   97,  120,  227,  142,   98,
      129,  130,   99,  121,  143,  100,  122,  137,  131,  123,
      101,  138,  124,  132,  133,  102,  982,  139,  147,  140,

      148,  151,  149,  141,   97,  150,  946,  142,   98,  129,
      130,   99,  181,  143,  100,  182,  183,  131,  152,  101,
       62,  153,  132,  133,  102,  184,  228,  147,  155,  148,
      151,  149,  156,  926,  150,  157,  792,  786,  158,  872,
      220,  181,  236,  734,  182,  183,  650,  152,  221,   60,
      153,  197,  237,  649,  184,  228,  238,  155,  606,  598,
      176,  156,  177,  248,  157,  178,  179,  158,  159,  220,
      160,  236,  161,  249,  241,  162,  250,  221,  242,  260,
      163,  237,  164,  165,  166,  238,  167,  168,  169,  176,
      261,  177,  248,   61,  178,  179,   67,  159,  588,  160,

      198,  161,  249,  241,  162,  250,  577,  242,  260,  163,
      497,  164,  165,  166,  170,  167,  168,  169,  171,  261,
      239,  172,  173,  264,  265,  230,  231,  240,  174,  190,
      218,  175,  216,   70,   70,   70,   70,   70,   70,  232,
      395,  251,  393,  170,  396,  214,  252,  171,   71,  239,
      172,  173,  264,  265,  230,  231,  240,  174,  204,  204,
      175,   89,  205,  205,  205,  205,  205,  205,  232,   90,
      251,  194,  268,   92,  266,  252,   93,   71,   94,   95,
      206,  206,  206,  206,  206,  206,  407,  212,  594,  258,
       89,  267,  259,  229,  229,  207,  271,  203,   90,  199,

      194,  268,   92,  266,  195,   93,  193,   94,   95,   73,
      233,   74,   74,   74,   74,   74,   74,  234,  258,  272,
      267,  259,  262,  235,  207,  271,   76,  209,  209,  243,
      273,  210,  210,  210,  210,  210,  210,  263,  269,  233,
      244,  245,  246,  274,  253,  270,  234,  254,  272,  247,
      275,  262,  235,  255,  276,   76,  281,  282,  243,  273,
      256,  257,  279,  277,  283,  280,  263,  269,  192,  244,
      245,  246,  274,  253,  270,  290,  254,  278,  247,  275,
      291,  292,  255,  276,   78,  281,  282,  293,   72,  256,
      257,  279,  277,  283,  280,  294,  306,  284,  304,  285,

      295,   69,  305,   64,  290,   58,  278,  286,  287,  291,
      292,  312,  288,  289, 1224,  296,  293,  297,  298,  307,
      308,  299,  310,  300,  294,  306,  284,  304,  285,  295,
      309,  305,  311,  317,  301,  302,  286,  287,  315,  316,
      312,  288,  289,  303,  296,  313,  297,  298,  307,  308,
      299,  310,  300,  314,  318,  319,  320,  324,  325,  309,
      337,  311,  317,  301,  302,  321,  326,  315,  316,  322,
      338,  339,  303,  340,  313,  323,   56,  341,  347,  348,
      353,   56, 1224,  318,  319,  320,  324,  325,  354,  337,
     1224,  396, 1224, 1224,  321,  326, 1224,  394,  322,  338,

      339, 1224,  340, 1224,  323,  327,  341,  347,  348,  353,
      328,  329,  349,  350,  355,  359,  330,  354,  331,  342,
      332,  333,  357,  334,  335,  351,  336,  363,  343,  352,
      344,  356,  345,  358,  327,  395,  346,  364,  365,  328,
      329,  349,  350,  355,  359,  330,  592,  331,  342,  332,
      333,  357,  334,  335,  351,  336,  363,  343,  352,  344,
      356,  345,  358,  360,  366,  346,  364,  365,  361,  374,
      369,  379,  367,  382,  362,  370,  380,  371,  372,  376,
      385,  375,  381,  377,  368,  373,  383,  378,  386,  388,
      384,  389,  360,  366,  390,  403,  394,  361,  374,  369,

      379,  367,  382,  362,  370,  380,  371,  372,  376,  385,
      375,  381,  377,  368,  373,  383,  378,  386,  388,  384,
      389,  190,  222,  390,  403,  392,   60,   60,   61,  394,
       60,   66,  197,  191,  191,   66,   66, 1224,   67,  404,
      405,  406,  396,  201,  408,  393,  224,  409, 1224, 1224,
      410,  222, 1224, 1224,  392,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205, 1224,  404,  405,
      406, 1224,  191,  408,  391,  224,  409,   62,   62,  410,
       61,  198,   68, 1224, 1224, 1224,   68,  202,  206,  206,
      206,  206,  206,  206,  210,  210,  210,  210,  210,  210,

      398,  398,  411,  207,  399,  399,  399,  399,  399,  399,
      210,  210,  210,  210,  210,  210,  412,  413,  414,  415,
      416,  417,  420,  418,  422,  423,  421,  424,  426,  393,
     1224,  411,  207,  431,  432,  433,  425,  436,  419,  434,
      435,  437, 1224,  427,  440,  412,  413,  414,  415,  416,
      417,  420,  418,  422,  423,  421,  424,  426,  428,  429,
      443,  430,  431,  432,  433,  425,  436,  419,  434,  435,
      437,  438,  427,  440,  439,  441,  444,  445,  446,  442,
      447,  448,  449,  450,  451,  452,  453,  428,  429,  443,
      430,  454,  455,  456,  457,  458,  459,  460,  462,  461,

      438,  463,  464,  439,  441,  444,  445,  446,  442,  447,
      448,  449,  450,  451,  452,  453,  465,  466,  467,  468,
      454,  455,  456,  457,  458,  459,  460,  462,  461,  469,
      463,  464,  470,  471,  472,  473,  474,  475, 1224,  482,
      483,  484,  485,  488, 1224,  465,  466,  467,  468,  489,
      490,  491,  492,  476,  477,  486,  478,  479,  469,  495,
      496,  470,  471,  472,  473,  474,  475,  480,  482,  483,
      484,  485,  488,  487,  498,  493,  499,  481,  489,  490,
      491,  492,  500,  501,  486,  494,  502,  503,  495,  496,
      504,  505,  506,  507,  508,  510,  480,  509,  511,  512,

      513,  514,  487,  498,  493,  499,  481,  515,  516,  519,
      517,  500,  501,  520,  494,  502,  503,  518,  521,  504,
      505,  506,  507,  508,  510,  522,  509,  511,  512,  513,
      514,  524,  525,  523,  526,  527,  515,  516,  519,  517,
      530,  528,  520,  531,  532,  533,  518,  521,  529,  534,
      535,  536,  537,  538,  522,  539,  540,  541,  542,  543,
      524,  525,  523,  526,  527,  544,  545,  546,  547,  530,
      528,  548,  531,  532,  533,  549,  553,  529,  534,  535,
      536,  537,  538,  554,  539,  540,  541,  542,  543,  550,
      555,  556,  557,  551,  544,  545,  546,  547,  552,  558,

      548,  559,  560,  561,  549,  553,  562,  563,  564,  566,
      567,  568,  554,  569,  565,  570,  571,  572,  550,  555,
      556,  557,  551,  573,  574,  575,  576,  578,  558,  582,
      559,  560,  561,  585,  586,  562,  563,  564,  566,  567,
      568, 1224,  569,  565,  570,  571,  572,  579,  580,  587,
      589,  590,  573,  574,  575,  576,  578,  583,  582,  595,
      596,  584,  585,  586,  399,  399,  399,  399,  399,  399,
      581,  597,  599,  600,  601,  602,  579,  580,  587,  589,
      590,  603,  604,  605,  607,  608,  583,  609,  595,  596,
      584,  399,  399,  399,  399,  399,  399,  610,  611,  581,

      597,  599,  600,  601,  602,  612,  613,  614,  615,  616,
      603,  604,  605,  607,  608,  617,  609,  618,  619,  620,
      621,  622,  623,  624,  626,  627,  610,  611,  628,  629,
      630,  625,  631,  632,  612,  613,  614,  615,  616,  633,
      634,  635,  636,  637,  617,  638,  618,  619,  620,  621,
      622,  623,  624,  626,  627,  639,  640,  628,  629,  630,
      641,  631,  632,  642,  643,  644,  645,  646,  633,  634,
      635,  636,  637,  647,  638,  648,  651,  652,  653,  654,
      655,  660,  656,  661,  639,  640,  657,  658,  662,  641,
      663,  664,  642,  643,  644,  645,  646,  665,  659,  668,

      666,  669,  647,  670,  648,  651,  652,  653,  654,  655,
      660,  656,  661,  671,  672,  657,  658,  662,  667,  663,
      664,  673,  674,  675,  676,  677,  665,  659,  668,  666,
      669,  678,  670,  679,  680,  682,  681,  683,  684,  685,
      686,  687,  671,  672,  688,  689,  690,  667,  691,  692,
      673,  674,  675,  676,  677,  693,  694,  695,  696,  697,
      678,  698,  679,  680,  682,  681,  683,  684,  685,  686,
      687,  699,  700,  688,  689,  690,  701,  691,  692,  702,
      703,  704,  705,  706,  693,  694,  695,  696,  697,  707,
      698,  708,  709,  710,  711,  712,  713,  714,  715,  716,

      699,  700,  717,  718,  719,  701,  723,  724,  702,  703,
      704,  705,  706,  720,  721,  725,  726,  727,  707,  728,
      708,  709,  710,  711,  712,  713,  714,  715,  716,  729,
      722,  717,  718,  719,  732,  723,  724,  733,  730,  735,
      736,  737,  720,  721,  725,  726,  727,  738,  728,  731,
      739,  740,  741,  742,  743,  744,  746,  747,  729,  722,
      748,  749,  750,  732,  751,  752,  733,  730,  735,  736,
      737,  745,  753,  394,   67,  396,  738,  754,  731,  739,
      740,  741,  742,  743,  744,  746,  747,  755,  756,  748,
      749,  750,  757,  751,  752,  758,  479,  759,  760,  761,

      745,  753,  762,  763,  764,  765,  754,  766,  767,  768,
      769,  770,  771,  772,  773,  774,  755,  756,  395,  594,
      775,  757,  592,  778,  758,  479,  759,  760,  761,  776,
      779,  762,  763,  764,  765,  780,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  781,  782,  777,  783,  775,
      784,  785,  778,  786,  787,  788,  789,  790,  776,  779,
      791,  793,  794,  795,  780,  796,  797,  799,  800,  801,
      802,  803,  798,  804,  781,  782,  777,  783,  805,  784,
      785,  806,  786,  787,  788,  789,  790,  807,  808,  791,
      793,  794,  795,  809,  796,  797,  799,  800,  801,  802,

      803,  798,  804,  810,  811,  812,  813,  805,  814,  815,
      806,  816,  817,  818,  819,  820,  807,  808,  821,  822,
      823,  824,  809,  825,  826,  827,  828,  829,  830,  831,
      832,  833,  810,  811,  812,  813,  834,  814,  815,  835,
      816,  817,  818,  819,  820,  836,  837,  821,  822,  823,
      824,  838,  825,  826,  827,  828,  829,  830,  831,  832,
      833,  839,  840,  841,  842,  834,  843,  844,  835,  845,
      846,  847,  848,  849,  836,  837,  850,  851,  852,  853,
      838,  854,  855,  856,  857,  858,  859,  860,  861,  862,
      839,  840,  841,  842,  863,  843,  844,  864,  845,  846,

      847,  848,  849,  865,  866,  850,  851,  852,  853,  867,
      854,  855,  856,  857,  858,  859,  860,  861,  862,  868,
      869,  870,  871,  863,  873,  874,  864,  875,  876,  877,
      878,  879,  865,  866,  880,  881,  882,  883,  867,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  868,  869,
      870,  871,  893,  873,  874,  894,  875,  876,  877,  878,
      879,  895,  896,  880,  881,  882,  883,  897,  884,  885,
      886,  887,  888,  889,  890,  891,  892,  898,  899,  900,
      901,  893,  902,  903,  894,  904,  905,  906,  907,  908,
      895,  896,  909,  910,  911,  912,  897,  913,  914,  915,

      916,  917,  918,  919,  920, 1224,  898,  899,  900,  901,
      924,  902,  903,  925,  904,  905,  906,  907,  908,  927,
      928,  909,  910,  911,  912,  929,  913,  914,  915,  916,
      917,  918,  919,  920,  921,  930,  931,  932,  933,  924,
      934,  922,  925,  935,  936,  937,  938,  939,  927,  928,
      940,  941,  923,  942,  929,  943,  944,  945,  947,  948,
      949,  950,  951,  921,  930,  931,  932,  933,  952,  934,
      922,  953,  935,  936,  937,  938,  939,  954,  955,  940,
      941,  923,  942,  956,  943,  944,  945,  947,  948,  949,
      950,  951,  957,  958,  959,  960,  962,  952,  963,  964,

      953,  476,  965,  966,  967,  968,  954,  955,  969,  970,
      971,  972,  956,  973,  974,  975,  976,  977,  978,  979,
      961,  957,  958,  959,  980,  962,  981,  963,  964,  984,
      476,  965,  966,  967,  968,  985,  986,  969,  970,  971,
      972,  987,  973,  974,  975,  976,  977,  978,  979,  961,
      988,  989,  990,  980,  991,  981,  992,  993,  984,  996,
      994,  997,  998,  999,  985,  986, 1000, 1001, 1002, 1003,
      987,  995, 1004, 1005, 1006, 1007, 1008, 1010, 1011,  988,
      989,  990, 1009,  991, 1012,  992,  993, 1013,  996,  994,
      997,  998,  999, 1014, 1015, 1000, 1001, 1002, 1003, 1016,

      995, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1017, 1018,
     1019, 1009, 1020, 1012, 1021, 1022, 1013,  477, 1023, 1024,
     1025, 1026, 1014, 1015, 1028, 1029, 1030, 1031, 1016, 1032,
     1033, 1034, 1035, 1036, 1037, 1038, 1039, 1017, 1018, 1019,
     1040, 1020, 1041, 1021, 1022, 1042,  477, 1023, 1024, 1025,
     1026, 1043, 1044, 1028, 1029, 1030, 1031, 1045, 1032, 1033,
     1034, 1035, 1036, 1037, 1038, 1039, 1047, 1048, 1049, 1040,
     1052, 1041, 1055, 1056, 1042, 1057, 1058, 1059, 1060, 1061,
     1043, 1044, 1062, 1063, 1050, 1051, 1045, 1064, 1065, 1066,
     1067, 1068, 1069, 1070, 1071, 1047, 1048, 1049, 1073, 1052,

     1074, 1055, 1056, 1075, 1057, 1058, 1059, 1060, 1061, 1076,
     1077, 1062, 1063, 1050, 1051, 1078, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1079, 1080, 1081, 1073, 1082, 1074,
     1083, 1084, 1075, 1086, 1088, 1089, 1090, 1091, 1076, 1077,
     1092, 1093, 1094, 1095, 1078, 1096, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1079, 1080, 1081, 1104, 1082, 1105, 1083,
     1084, 1106, 1086, 1088, 1089, 1090, 1091, 1107, 1108, 1092,
     1093, 1094, 1095, 1109, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1110, 1111, 1112, 1104, 1113, 1105, 1114, 1115,
     1106, 1116, 1117, 1118, 1119, 1120, 1107, 1108, 1121, 1122,

     1123, 1125, 1109, 1126, 1127, 1128, 1129, 1130, 1131, 1132,
     1133, 1110, 1111, 1112, 1134, 1113, 1135, 1114, 1115, 1136,
     1116, 1117, 1118, 1119, 1120, 1137, 1138, 1121, 1122, 1123,
     1125, 1139, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1140, 1141, 1142, 1134, 1143, 1135, 1144, 1145, 1136, 1146,
     1147, 1148, 1149, 1150, 1137, 1138, 1151, 1152, 1153, 1154,
     1139, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1140,
     1141, 1142, 1163, 1143, 1164, 1144, 1145, 1165, 1146, 1147,
     1148, 1149, 1150, 1167, 1168, 1151, 1152, 1153, 1154, 1169,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1170, 1171,

     1172, 1163, 1173, 1164, 1174, 1175, 1165, 1176, 1177, 1178,
     1179, 1180, 1167, 1168, 1181, 1182, 1183, 1184, 1169, 1185,
     1186, 1187, 1188, 1189, 1190, 1191, 1192, 1170, 1171, 1172,
     1193, 1173, 1194, 1174, 1175, 1195, 1176, 1177, 1178, 1179,
     1180, 1196, 1197, 1181, 1182, 1183, 1184, 1198, 1185, 1186,
     1187, 1188, 1189, 1190, 1191, 1192, 1199, 1200, 1201, 1193,
     1202, 1194, 1203, 1204, 1195, 1206, 1207, 1208, 1209, 1210,
     1196, 1197, 1211, 1212, 1213, 1214, 1198, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1222, 1199, 1200, 1201, 1223, 1202,
     1224, 1203, 1204, 1224, 1206, 1207, 1208, 1209, 1210, 1224,

     1224, 1211, 1212, 1213, 1214, 1224, 1215, 1216, 1217, 1218,
     1219, 1220, 1221, 1222, 1224, 1224, 1224, 1223,   55,   55,
       55,   55,   55,   55,   55,   55,   59,   59,   59,   59,
       59,   59,   59,   59,   63, 1224,   63,   63,   63,   63,
       63,   63,   65,   65,   65,   65,   65,   65,   65,   65,
       85,   85,   85,   85,   85,   85,   88,   88,  189,  189,
      189,  189,  189,  189,  189,  196,  196,  196,  196,  196,
      196,  196,  196,  200,  200,  200,  200,  200,  200,  200,
      200,  213,  213, 1224,  213,  213,  213,  213,  213,  215,
      215,  215,  215, 1224,  215,  215,  215,  217,  217,  217,

      217,  217,  217,  217,  191,  191,  191,  191,  191,  191,
      191,  195, 1224,  195,  195,  195,  195,  195,  195,  199,
     1224,  199,  199,  199,  199,  199,  199,  397, 1224,  397,
      397,  397,  397,  397,  397,  591, 1224,  591,  591,  591,
      591,  591,  591,  593, 1224,  593,  593,  593,  593,  593,
      593,    7, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224
    } ;

static yyconst flex_int16_t yy_chk[2736] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   23,   23,
       23,   25,   25,   16,   18,   18,   18,   18,   18,   18,

       33,   21,   36,   21,   21,   21,   21,   21,   21,   18,
       26,   43,    5,    6, 1238,   26,   75,   75,   21,  213,
       34,  213,   48,   96,   96,   65,  215,   50,   34,   33,
     1234,   36,   65,  215,   34, 1198,   12,   16,   18,   20,
       43,   20,   20,   20,   20,   20,   20,   21,   29,   34,
       30,   48,   40,   20,   30,   29,   20,   34,   30,   50,
     1145,   26,   29,   34,   30,   29,   40,   30,   29,   51,
       30, 1088,   40,   68,   52,   20,   65,   29, 1086,   30,
       68,   40,   20,   30,   29,   20, 1031,   30,   50,   31,
       89,   29,  217,   30,   29,   40,   30,   29,   51,   30,

       31,   40,   31,   52,   20,   27,   37,   31,   91,   92,
       37,   91,   31,   27,   53,   27,   85,   27,   31,   89,
       27,   85,   27,   27,   68, 1028,   53,   53, 1011,   31,
       93,   31,   91,  987,   27,   37,   31,   91,   92,   37,
       91,   31,   27,   32,   27,  217,   27,   32,   94,   27,
      986,   27,   27,   28,   32,  208,  208,   32,   38,   93,
       32,   91,   38,   32,  978,   53,  955,   85,   38,   59,
       39,   59,   32,  892,   39,   28,   32,   94,   39,   28,
       35,   35,   28,   32,   39,   28,   32,   38,   35,   32,
       28,   38,   32,   35,   35,   28,  891,   38,   41,   39,

       41,   42,   41,   39,   28,   41,  842,   39,   28,   35,
       35,   28,   49,   39,   28,   49,   49,   35,   42,   28,
       59,   42,   35,   35,   28,   49,   95,   41,   44,   41,
       42,   41,   44,  814,   41,   44,  642,  642,   44,  741,
       90,   49,   99,  565,   49,   49,  469,   42,   90,   62,
       42,   62,  100,  468,   49,   95,  101,   44,  419,  406,
       47,   44,   47,  106,   44,   47,   47,   44,   45,   90,
       45,   99,   45,  106,  104,   45,  107,   90,  104,  111,
       45,  100,   45,   45,   45,  101,   45,   45,   45,   47,
      112,   47,  106,  195,   47,   47,  199,   45,  387,   45,

       62,   45,  106,  104,   45,  107,  379,  104,  111,   45,
      303,   45,   45,   45,   46,   45,   45,   45,   46,  112,
      103,   46,   46,  114,  115,   97,   97,  103,   46,  191,
       87,   46,   86,   70,   70,   70,   70,   70,   70,   97,
      199,  108,  195,   46,  395,   84,  108,   46,   70,  103,
       46,   46,  114,  115,   97,   97,  103,   46,   71,   71,
       46,   57,   71,   71,   71,   71,   71,   71,   97,   57,
      108,   57,  117,   57,  116,  108,   57,   70,   57,   57,
       73,   73,   73,   73,   73,   73,  229,   80,  395,  110,
       57,  116,  110,  229,  229,   73,  119,   69,   57,   67,

       57,  117,   57,  116,   61,   57,   56,   57,   57,   74,
       98,   74,   74,   74,   74,   74,   74,   98,  110,  120,
      116,  110,  113,   98,   73,  119,   74,   76,   76,  105,
      121,   76,   76,   76,   76,   76,   76,  113,  118,   98,
      105,  105,  105,  122,  109,  118,   98,  109,  120,  105,
      123,  113,   98,  109,  124,   74,  127,  128,  105,  121,
      109,  109,  126,  125,  130,  126,  113,  118,   54,  105,
      105,  105,  122,  109,  118,  133,  109,  125,  105,  123,
      134,  135,  109,  124,   22,  127,  128,  136,   19,  109,
      109,  126,  125,  130,  126,  137,  141,  131,  140,  131,

      137,   17,  140,   15,  133,   11,  125,  131,  131,  134,
      135,  144,  131,  131,    7,  138,  136,  138,  138,  142,
      142,  139,  143,  139,  137,  141,  131,  140,  131,  137,
      142,  140,  143,  148,  139,  139,  131,  131,  146,  146,
      144,  131,  131,  139,  138,  145,  138,  138,  142,  142,
      139,  143,  139,  145,  149,  150,  151,  153,  154,  142,
      156,  143,  148,  139,  139,  152,  154,  146,  146,  152,
      157,  158,  139,  159,  145,  152,    4,  160,  162,  163,
      166,    3,    0,  149,  150,  151,  153,  154,  167,  156,
        0,  396,    0,    0,  152,  154,    0,  393,  152,  157,

      158,    0,  159,    0,  152,  155,  160,  162,  163,  166,
      155,  155,  164,  164,  168,  170,  155,  167,  155,  161,
      155,  155,  169,  155,  155,  165,  155,  172,  161,  165,
      161,  168,  161,  169,  155,  396,  161,  173,  173,  155,
      155,  164,  164,  168,  170,  155,  393,  155,  161,  155,
      155,  169,  155,  155,  165,  155,  172,  161,  165,  161,
      168,  161,  169,  171,  175,  161,  173,  173,  171,  177,
      176,  179,  175,  181,  171,  176,  180,  176,  176,  178,
      183,  177,  180,  178,  175,  176,  182,  178,  184,  186,
      182,  187,  171,  175,  188,  221,  394,  171,  177,  176,

      179,  175,  181,  171,  176,  180,  176,  176,  178,  183,
      177,  180,  178,  175,  176,  182,  178,  184,  186,  182,
      187,  189,  194,  188,  221,  194,  196,  197,  196,  197,
      198,  200,  198,  189,  189,  201,  202,    0,  200,  222,
      225,  227,  201,  202,  230,  394,  194,  231,    0,    0,
      232,  194,    0,    0,  194,  204,  204,  204,  204,  204,
      204,  205,  205,  205,  205,  205,  205,    0,  222,  225,
      227,    0,  189,  230,  189,  194,  231,  196,  197,  232,
      591,  198,  200,    0,    0,    0,  201,  202,  206,  206,
      206,  206,  206,  206,  209,  209,  209,  209,  209,  209,

      207,  207,  233,  206,  207,  207,  207,  207,  207,  207,
      210,  210,  210,  210,  210,  210,  234,  236,  237,  238,
      239,  240,  241,  240,  242,  243,  241,  244,  245,  591,
        0,  233,  206,  247,  248,  249,  244,  251,  240,  250,
      250,  251,    0,  246,  254,  234,  236,  237,  238,  239,
      240,  241,  240,  242,  243,  241,  244,  245,  246,  246,
      256,  246,  247,  248,  249,  244,  251,  240,  250,  250,
      251,  253,  246,  254,  253,  255,  257,  258,  260,  255,
      261,  262,  263,  264,  265,  267,  268,  246,  246,  256,
      246,  269,  269,  270,  271,  272,  273,  274,  275,  274,

      253,  276,  277,  253,  255,  257,  258,  260,  255,  261,
      262,  263,  264,  265,  267,  268,  278,  279,  280,  281,
      269,  269,  270,  271,  272,  273,  274,  275,  274,  282,
      276,  277,  283,  284,  285,  286,  287,  288,    0,  290,
      291,  292,  293,  295,    0,  278,  279,  280,  281,  296,
      297,  298,  299,  289,  289,  294,  289,  289,  282,  301,
      302,  283,  284,  285,  286,  287,  288,  289,  290,  291,
      292,  293,  295,  294,  304,  300,  306,  289,  296,  297,
      298,  299,  307,  308,  294,  300,  309,  310,  301,  302,
      311,  312,  314,  315,  316,  317,  289,  316,  318,  319,

      319,  320,  294,  304,  300,  306,  289,  321,  322,  324,
      323,  307,  308,  325,  300,  309,  310,  323,  326,  311,
      312,  314,  315,  316,  317,  327,  316,  318,  319,  319,
      320,  328,  329,  327,  330,  331,  321,  322,  324,  323,
      333,  332,  325,  334,  335,  336,  323,  326,  332,  337,
      338,  339,  340,  341,  327,  342,  343,  344,  345,  347,
      328,  329,  327,  330,  331,  348,  349,  350,  351,  333,
      332,  352,  334,  335,  336,  353,  355,  332,  337,  338,
      339,  340,  341,  356,  342,  343,  344,  345,  347,  353,
      357,  359,  360,  353,  348,  349,  350,  351,  353,  361,

      352,  362,  363,  364,  353,  355,  365,  366,  367,  368,
      369,  370,  356,  370,  367,  371,  372,  373,  353,  357,
      359,  360,  353,  374,  375,  376,  378,  380,  361,  382,
      362,  363,  364,  384,  385,  365,  366,  367,  368,  369,
      370,    0,  370,  367,  371,  372,  373,  381,  381,  386,
      389,  390,  374,  375,  376,  378,  380,  383,  382,  403,
      404,  383,  384,  385,  398,  398,  398,  398,  398,  398,
      381,  405,  408,  409,  410,  411,  381,  381,  386,  389,
      390,  412,  415,  417,  420,  421,  383,  422,  403,  404,
      383,  399,  399,  399,  399,  399,  399,  423,  424,  381,

      405,  408,  409,  410,  411,  425,  426,  427,  428,  429,
      412,  415,  417,  420,  421,  430,  422,  431,  432,  433,
      434,  435,  436,  437,  438,  439,  423,  424,  440,  441,
      442,  437,  443,  444,  425,  426,  427,  428,  429,  445,
      446,  449,  451,  453,  430,  454,  431,  432,  433,  434,
      435,  436,  437,  438,  439,  456,  457,  440,  441,  442,
      458,  443,  444,  459,  460,  461,  463,  464,  445,  446,
      449,  451,  453,  465,  454,  467,  470,  471,  472,  473,
      474,  482,  475,  486,  456,  457,  475,  480,  487,  458,
      490,  491,  459,  460,  461,  463,  464,  493,  480,  497,

      495,  498,  465,  499,  467,  470,  471,  472,  473,  474,
      482,  475,  486,  500,  501,  475,  480,  487,  495,  490,
      491,  502,  503,  504,  505,  506,  493,  480,  497,  495,
      498,  508,  499,  509,  510,  511,  510,  512,  513,  514,
      515,  516,  500,  501,  517,  518,  519,  495,  520,  521,
      502,  503,  504,  505,  506,  522,  524,  525,  526,  527,
      508,  528,  509,  510,  511,  510,  512,  513,  514,  515,
      516,  529,  530,  517,  518,  519,  531,  520,  521,  532,
      533,  534,  535,  536,  522,  524,  525,  526,  527,  537,
      528,  538,  539,  540,  541,  542,  544,  546,  547,  548,

      529,  530,  549,  550,  551,  531,  553,  554,  532,  533,
      534,  535,  536,  552,  552,  555,  556,  557,  537,  558,
      538,  539,  540,  541,  542,  544,  546,  547,  548,  561,
      552,  549,  550,  551,  563,  553,  554,  564,  562,  568,
      569,  570,  552,  552,  555,  556,  557,  571,  558,  562,
      572,  573,  574,  575,  576,  577,  578,  579,  561,  552,
      580,  581,  584,  563,  585,  587,  564,  562,  568,  569,
      570,  577,  590,  592,  593,  594,  571,  596,  562,  572,
      573,  574,  575,  576,  577,  578,  579,  597,  598,  580,
      581,  584,  599,  585,  587,  601,  602,  603,  605,  607,

      577,  590,  608,  610,  611,  612,  596,  613,  614,  615,
      616,  617,  619,  621,  622,  623,  597,  598,  593,  594,
      624,  599,  592,  626,  601,  602,  603,  605,  607,  625,
      627,  608,  610,  611,  612,  628,  613,  614,  615,  616,
      617,  619,  621,  622,  623,  629,  630,  625,  631,  624,
      632,  633,  626,  634,  635,  636,  637,  638,  625,  627,
      639,  644,  645,  648,  628,  649,  650,  651,  653,  656,
      657,  658,  650,  659,  629,  630,  625,  631,  660,  632,
      633,  661,  634,  635,  636,  637,  638,  665,  666,  639,
      644,  645,  648,  667,  649,  650,  651,  653,  656,  657,

      658,  650,  659,  668,  670,  671,  672,  660,  673,  674,
      661,  676,  677,  678,  679,  680,  665,  666,  681,  684,
      685,  686,  667,  687,  688,  689,  691,  694,  695,  696,
      697,  698,  668,  670,  671,  672,  699,  673,  674,  700,
      676,  677,  678,  679,  680,  701,  702,  681,  684,  685,
      686,  703,  687,  688,  689,  691,  694,  695,  696,  697,
      698,  706,  707,  708,  709,  699,  710,  711,  700,  712,
      713,  714,  715,  716,  701,  702,  717,  718,  719,  720,
      703,  721,  722,  723,  724,  725,  726,  727,  728,  729,
      706,  707,  708,  709,  730,  710,  711,  731,  712,  713,

      714,  715,  716,  732,  733,  717,  718,  719,  720,  736,
      721,  722,  723,  724,  725,  726,  727,  728,  729,  737,
      738,  739,  740,  730,  744,  745,  731,  746,  747,  748,
      749,  753,  732,  733,  754,  756,  758,  760,  736,  762,
      763,  764,  766,  767,  768,  769,  770,  772,  737,  738,
      739,  740,  774,  744,  745,  775,  746,  747,  748,  749,
      753,  776,  777,  754,  756,  758,  760,  778,  762,  763,
      764,  766,  767,  768,  769,  770,  772,  779,  780,  781,
      783,  774,  784,  785,  775,  787,  789,  791,  793,  794,
      776,  777,  796,  797,  798,  801,  778,  803,  804,  805,

      806,  807,  808,  809,  810,    0,  779,  780,  781,  783,
      812,  784,  785,  813,  787,  789,  791,  793,  794,  815,
      816,  796,  797,  798,  801,  817,  803,  804,  805,  806,
      807,  808,  809,  810,  811,  819,  820,  821,  822,  812,
      823,  811,  813,  824,  825,  826,  827,  828,  815,  816,
      829,  831,  811,  834,  817,  835,  836,  841,  844,  845,
      846,  848,  849,  811,  819,  820,  821,  822,  850,  823,
      811,  851,  824,  825,  826,  827,  828,  852,  853,  829,
      831,  811,  834,  854,  835,  836,  841,  844,  845,  846,
      848,  849,  855,  856,  857,  858,  860,  850,  861,  862,

      851,  863,  864,  865,  866,  868,  852,  853,  870,  873,
      874,  876,  854,  877,  878,  879,  881,  884,  885,  888,
      858,  855,  856,  857,  889,  860,  890,  861,  862,  893,
      863,  864,  865,  866,  868,  894,  895,  870,  873,  874,
      876,  896,  877,  878,  879,  881,  884,  885,  888,  858,
      901,  902,  903,  889,  904,  890,  908,  909,  893,  911,
      910,  912,  914,  917,  894,  895,  918,  919,  920,  921,
      896,  910,  922,  923,  924,  925,  926,  927,  929,  901,
      902,  903,  926,  904,  931,  908,  909,  932,  911,  910,
      912,  914,  917,  934,  935,  918,  919,  920,  921,  937,

      910,  922,  923,  924,  925,  926,  927,  929,  938,  940,
      944,  926,  946,  931,  947,  948,  932,  949,  951,  952,
      953,  954,  934,  935,  956,  957,  958,  959,  937,  961,
      962,  963,  964,  965,  966,  969,  970,  938,  940,  944,
      971,  946,  972,  947,  948,  973,  949,  951,  952,  953,
      954,  975,  976,  956,  957,  958,  959,  977,  961,  962,
      963,  964,  965,  966,  969,  970,  979,  980,  983,  971,
      984,  972,  989,  990,  973,  991,  993,  994,  995,  996,
      975,  976,  997,  999,  983,  983,  977, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009,  979,  980,  983, 1013,  984,

     1014,  989,  990, 1015,  991,  993,  994,  995,  996, 1016,
     1017,  997,  999,  983,  983, 1018, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1020, 1021, 1022, 1013, 1024, 1014,
     1026, 1027, 1015, 1029, 1032, 1033, 1034, 1035, 1016, 1017,
     1040, 1041, 1042, 1044, 1018, 1048, 1049, 1050, 1051, 1055,
     1056, 1058, 1059, 1020, 1021, 1022, 1060, 1024, 1061, 1026,
     1027, 1062, 1029, 1032, 1033, 1034, 1035, 1063, 1064, 1040,
     1041, 1042, 1044, 1065, 1048, 1049, 1050, 1051, 1055, 1056,
     1058, 1059, 1067, 1068, 1070, 1060, 1071, 1061, 1072, 1073,
     1062, 1074, 1077, 1078, 1079, 1082, 1063, 1064, 1083, 1084,

     1085, 1087, 1065, 1090, 1092, 1094, 1095, 1097, 1098, 1099,
     1100, 1067, 1068, 1070, 1101, 1071, 1102, 1072, 1073, 1103,
     1074, 1077, 1078, 1079, 1082, 1104, 1105, 1083, 1084, 1085,
     1087, 1106, 1090, 1092, 1094, 1095, 1097, 1098, 1099, 1100,
     1107, 1108, 1111, 1101, 1112, 1102, 1113, 1114, 1103, 1116,
     1119, 1120, 1122, 1123, 1104, 1105, 1124, 1125, 1127, 1128,
     1106, 1129, 1130, 1131, 1132, 1133, 1135, 1136, 1140, 1107,
     1108, 1111, 1141, 1112, 1143, 1113, 1114, 1144, 1116, 1119,
     1120, 1122, 1123, 1147, 1148, 1124, 1125, 1127, 1128, 1149,
     1129, 1130, 1131, 1132, 1133, 1135, 1136, 1140, 1150, 1151,

     1152, 1141, 1153, 1143, 1154, 1155, 1144, 1157, 1159, 1160,
     1161, 1162, 1147, 1148, 1164, 1165, 1166, 1167, 1149, 1169,
     1170, 1171, 1172, 1173, 1175, 1176, 1179, 1150, 1151, 1152,
     1180, 1153, 1181, 1154, 1155, 1183, 1157, 1159, 1160, 1161,
     1162, 1184, 1185, 1164, 1165, 1166, 1167, 1186, 1169, 1170,
     1171, 1172, 1173, 1175, 1176, 1179, 1187, 1191, 1192, 1180,
     1194, 1181, 1195, 1196, 1183, 1199, 1200, 1201, 1202, 1203,
     1184, 1185, 1204, 1205, 1206, 1207, 1186, 1209, 1210, 1211,
     1212, 1215, 1216, 1217, 1218, 1187, 1191, 1192, 1222, 1194,
        0, 1195, 1196,    0, 1199, 1200, 1201, 1202, 1203,    0,

        0, 1204, 1205, 1206, 1207,    0, 1209, 1210, 1211, 1212,
     1215, 1216, 1217, 1218,    0,    0,    0, 1222, 1225, 1225,
     1225, 1225, 1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1227,    0, 1227, 1227, 1227, 1227,
     1227, 1227, 1228, 1228, 1228, 1228, 1228, 1228, 1228, 1228,
     1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1233, 1233, 1233, 1233, 1233, 1233, 1233,
     1233, 1235, 1235,    0, 1235, 1235, 1235, 1235, 1235, 1236,
     1236, 1236, 1236,    0, 1236, 1236, 1236, 1237, 1237, 1237,

     1237, 1237, 1237, 1237, 1239, 1239, 1239, 1239, 1239, 1239,
     1239, 1240,    0, 1240, 1240, 1240, 1240, 1240, 1240, 1241,
        0, 1241, 1241, 1241, 1241, 1241, 1241, 1242,    0, 1242,
     1242, 1242, 1242, 1242, 1242, 1243,    0, 1243, 1243, 1243,
     1243, 1243, 1243, 1244,    0, 1244, 1244, 1244, 1244, 1244,
     1244, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,

     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[293] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "sql.l"
/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/sql/RCS/glrmysql.l,v 2.1 2009/11/08 02:53:39 johnl Exp $
 */
/*
 * Scanner for mysql subset, GLR version
 */
#line 14 "sql.l"
#include "sql_node_struct.h"
#include "sql.tab.hpp"

#include <stdarg.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <malloc.h>

extern "C" int yylex();
extern char globalInputText[10000];
extern int readInputForLexer( char *buffer, int *numBytesRead, int maxBytesToRead );
int oldstate;
extern char linebuf[500];

#undef YY_INPUT
#define YY_INPUT(b,r,s) readInputForLexer(b,&r,s)



#line 1528 "lex.yy.c"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 37 "sql.l"


  /* keywords */

#line 1717 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1225 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2652 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "sql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 42 "sql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "sql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "sql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 49 "sql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "sql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "sql.l"
{ return APPEND; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "sql.l"
{ return AS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "sql.l"
{ return ASC; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "sql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "sql.l"
{ return BEFORE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "sql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "sql.l"
{ return BIGINT; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "sql.l"
{ return BINARY; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "sql.l"
{ return BIT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "sql.l"
{ return BLOB; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "sql.l"
{ return BOTH; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "sql.l"
{ return BTREE;}	// 2014-3-24---增加---by Yu
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "sql.l"
{ return BY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "sql.l"
{ return CALL; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "sql.l"
{ return CASCADE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "sql.l"
{ return CASE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "sql.l"
{ return CHANGE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "sql.l"
{ return CHAR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "sql.l"
{ return CHECK; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "sql.l"
{ return COLLATE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "sql.l"
{ return COLUMN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "sql.l"
{ return COMMENT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "sql.l"
{ return CONDITION; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "sql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "sql.l"
{ return CONTINUE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "sql.l"
{ return CONVERT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "sql.l"
{ return CREATE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "sql.l"
{ return CROSS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "sql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "sql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "sql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "sql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "sql.l"
{ return CURSOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "sql.l"
{ return DATABASE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "sql.l"
{ return DATABASES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "sql.l"
{ return DAY;}//---5.26fzh---
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "sql.l"
{ return DATE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "sql.l"
{ return DATETIME; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "sql.l"
{ return DAY_HOUR; }//---5.26fzh---
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "sql.l"
{ return DAY_MICROSECOND; }//---5.26fzh---
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "sql.l"
{ return DAY_MINUTE; }//---5.26fzh---
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "sql.l"
{ return DAY_SECOND; }//---5.26fzh---
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "sql.l"
{ return DECIMAL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "sql.l"
{ return DECLARE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "sql.l"
{ return DEFAULT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "sql.l"
{ return DELAYED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "sql.l"
{ return DELETE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "sql.l"
{ return DESC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "sql.l"
{ return DESCRIBE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "sql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "sql.l"
{ return DISTINCT; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "sql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "sql.l"
{ return DIV; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "sql.l"
{ return DOUBLE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "sql.l"
{ return DROP; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "sql.l"
{ return DUAL; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "sql.l"
{ return EACH; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "sql.l"
{ return ELSE; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "sql.l"
{ return ELSEIF; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "sql.l"
{ return END; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "sql.l"
{ return ENUM; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "sql.l"
{ return ESCAPED; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "sql.l"
{ return EXISTS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "sql.l"
{ return EXIT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 116 "sql.l"
{ return EXPLAIN; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 117 "sql.l"
{ return FETCH; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 118 "sql.l"
{ return FLOAT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 119 "sql.l"
{ return FOR; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "sql.l"
{ return FORCE; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "sql.l"
{ return FOREIGN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "sql.l"
{ return FROM; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "sql.l"
{ return FULLTEXT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "sql.l"
{ return GRANT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "sql.l"
{ return GROUP; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "sql.l"
{ return HASH; }	// 2014-3-24---增加---by Yu
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "sql.l"
{ return HAVING; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "sql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "sql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "sql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "sql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "sql.l"
{ return IF; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "sql.l"
{ return IGNORE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "sql.l"
{ return IN; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "sql.l"
{ return INFILE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "sql.l"
{ return INNER; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "sql.l"
{ return INOUT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 138 "sql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 139 "sql.l"
{ return INSERT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 140 "sql.l"
{ return INTEGER; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 141 "sql.l"
{ return INTERVAL; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 142 "sql.l"
{ return INTO; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 143 "sql.l"
{ return IS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 144 "sql.l"
{ return ITERATE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 145 "sql.l"
{ return JOIN; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 146 "sql.l"
{ return INDEX; }	// 2014-3-24---增加---by Yu
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 147 "sql.l"
{ return KEY; }	// 2014-3-24---修改---by Yu
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 148 "sql.l"
{ return KEYS; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 149 "sql.l"
{ return KILL; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "sql.l"
{ return LEADING; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "sql.l"
{ return LEAVE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "sql.l"
{ return LEFT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 153 "sql.l"
{ return LIKE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 154 "sql.l"
{ return LIMIT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 155 "sql.l"
{ return LINES; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 156 "sql.l"
{ return LOAD; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 157 "sql.l"
{ return LOCALTIME; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 158 "sql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 159 "sql.l"
{ return LOCK; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 160 "sql.l"
{ return LONG; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 161 "sql.l"
{ return LONGBLOB; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 162 "sql.l"
{ return LONGTEXT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 163 "sql.l"
{ return LOOP; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 164 "sql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 165 "sql.l"
{ return MATCH; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 166 "sql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 167 "sql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 168 "sql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 169 "sql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 170 "sql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 171 "sql.l"
{ return MOD; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 172 "sql.l"
{ return MODIFIES; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 173 "sql.l"
{ return NATURAL; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 174 "sql.l"
{ return NOT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 175 "sql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 176 "sql.l"
{ return NULLX; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 177 "sql.l"
{ return NUMBER; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 178 "sql.l"
{ return ON; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 179 "sql.l"
{ return DUPLICATE; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 180 "sql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 181 "sql.l"
{ return OPTION; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 182 "sql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 183 "sql.l"
{ return OR; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 184 "sql.l"
{ return ORDER; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 185 "sql.l"
{ return OUT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 186 "sql.l"
{ return OUTER; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 187 "sql.l"
{ return OUTFILE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 188 "sql.l"
{ return PARTITIONED; }	// 2014-2-24---增加对这个词的识别---by余楷
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 189 "sql.l"
{ return PRECISION; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 190 "sql.l"
{ return PRIMARY; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 191 "sql.l"
{ return PROCEDURE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 192 "sql.l"
{ return PROJECTION; }	// 2014-2-24---增加对这个词的识别---by余楷
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 193 "sql.l"
{ return PURGE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 194 "sql.l"
{ return QUICK; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 195 "sql.l"
{ return QUARTER;}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 196 "sql.l"
{ return READ; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 197 "sql.l"
{ return READS; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 198 "sql.l"
{ return REAL; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 199 "sql.l"
{ return REFERENCES; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 200 "sql.l"
{ return REGEXP; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 201 "sql.l"
{ return RELEASE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 202 "sql.l"
{ return RENAME; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 203 "sql.l"
{ return REPEAT; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 204 "sql.l"
{ return REPLACE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 205 "sql.l"
{ return REQUIRE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 206 "sql.l"
{ return RESTRICT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 207 "sql.l"
{ return RETURN; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 208 "sql.l"
{ return REVOKE; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 209 "sql.l"
{ return RIGHT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 210 "sql.l"
{ return ROLLUP; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 211 "sql.l"
{ return SAMPLE; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 212 "sql.l"
{ return SCHEMA; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 213 "sql.l"
{ return SCHEMAS; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 214 "sql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 215 "sql.l"
{ return SELECT; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 216 "sql.l"
{ return SENSITIVE; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 217 "sql.l"
{ return SEPARATOR; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 218 "sql.l"
{ return SET; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 219 "sql.l"
{ return SHOW; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 220 "sql.l"
{ return SMALLINT; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 221 "sql.l"
{ return SOME; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 222 "sql.l"
{ return SONAME; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 223 "sql.l"
{ return SPATIAL; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 224 "sql.l"
{ return SPECIFIC; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 225 "sql.l"
{ return SQL; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 226 "sql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 227 "sql.l"
{ return SQLSTATE; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 228 "sql.l"
{ return SQLWARNING; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 229 "sql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 230 "sql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 231 "sql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 232 "sql.l"
{ return SSL; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 233 "sql.l"
{ return STARTING; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 234 "sql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 235 "sql.l"
{ return TABLE; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 236 "sql.l"
{ return TABLES; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 237 "sql.l"
{ return TEMPORARY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 238 "sql.l"
{ return TERMINATED; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 239 "sql.l"
{ return TEXT; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 240 "sql.l"
{ return THEN; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 241 "sql.l"
{ return TIME; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 242 "sql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 243 "sql.l"
{ return TINYINT; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 244 "sql.l"
{ return TINYTEXT; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 245 "sql.l"
{ return TO; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 246 "sql.l"
{ return TRAILING; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 247 "sql.l"
{ return TRIGGER; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 248 "sql.l"
{ return UNDO; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 249 "sql.l"
{ return UNION; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 250 "sql.l"
{ return UNIQUE; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 251 "sql.l"
{ return UNLOCK; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 252 "sql.l"
{ return UNSIGNED; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 253 "sql.l"
{ return UPDATE; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 254 "sql.l"
{ return USAGE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 255 "sql.l"
{ return USE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 256 "sql.l"
{ return USING; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 257 "sql.l"
{ return UTC_DATE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 258 "sql.l"
{ return UTC_TIME; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 259 "sql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 260 "sql.l"
{ return VALUES; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 261 "sql.l"
{ return VARBINARY; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 262 "sql.l"
{ return VARCHAR; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 263 "sql.l"
{ return VARYING; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 264 "sql.l"
{ return WHEN; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 265 "sql.l"
{ return WHERE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 266 "sql.l"
{ return WEEK;}//---5.26fzh---
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 267 "sql.l"
{ return WHILE; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 268 "sql.l"
{ return WITH; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 269 "sql.l"
{ return WRITE; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 270 "sql.l"
{ return XOR; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 271 "sql.l"
{ return YEAR; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 272 "sql.l"
{ return YEAR_MONTH; }//---5.26fzh---
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 273 "sql.l"
{ return ZEROFILL; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 274 "sql.l"
{ return BEGINT; }
	YY_BREAK
/* numbers */
case 231:
YY_RULE_SETUP
#line 279 "sql.l"
{ yylval.strval = strdup(yytext); return INTNUM; } 	// 2014-4-14---save int value in string type
	YY_BREAK
case 232:
#line 283 "sql.l"
case 233:
#line 284 "sql.l"
case 234:
#line 285 "sql.l"
case 235:
#line 286 "sql.l"
case 236:
YY_RULE_SETUP
#line 286 "sql.l"
{ yylval.strval = strdup(yytext); return APPROXNUM; }	// 2014-4-14---save double value in string type
	YY_BREAK
/* booleans */	// 2014-4-14---save bool value in string type
case 237:
YY_RULE_SETUP
#line 289 "sql.l"
{ yylval.strval = "1"; return BOOL; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 290 "sql.l"
{ yylval.strval = "-1"; return BOOL; }	// 2014-4-14---not supported now---Yu
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 291 "sql.l"
{ yylval.strval = "0"; return BOOL; }
	YY_BREAK
/* strings */
case 240:
#line 297 "sql.l"
case 241:
YY_RULE_SETUP
#line 297 "sql.l"
{
				char *temp = strdup(yytext); 
				//printf("temp:%s\n",temp);
				yylval.strval = strdup(yytext);
				
				//2014-4-3---处理转义字符以及消去首尾的引号---by Yu
				GetCorrectString(yylval.strval, temp);
				
				//printf("the string is %s\n",yylval.strval);
				return STRING;
			}
	YY_BREAK
case 242:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 309 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 243:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 310 "sql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 244:
#line 314 "sql.l"
case 245:
YY_RULE_SETUP
#line 314 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 246:
#line 319 "sql.l"
case 247:
YY_RULE_SETUP
#line 319 "sql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 248:
YY_RULE_SETUP
#line 323 "sql.l"
{ return yytext[0]; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 325 "sql.l"
{ return ANDOP; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 326 "sql.l"
{ return OR; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 328 "sql.l"
{ yylval.subtok = 1; return COMPARISON; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 329 "sql.l"
{ yylval.subtok = 2; return COMPARISON; }
	YY_BREAK
case 253:
#line 331 "sql.l"
case 254:
YY_RULE_SETUP
#line 331 "sql.l"
{ yylval.subtok = 3; return COMPARISON; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 332 "sql.l"
{ yylval.subtok = 4; return COMPARISON; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 333 "sql.l"
{ yylval.subtok = 5; return COMPARISON; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 334 "sql.l"
{ yylval.subtok = 6; return COMPARISON; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 335 "sql.l"
{ yylval.subtok = 12; return COMPARISON; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 337 "sql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 338 "sql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
/* functions */
case 261:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 342 "sql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 262:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 343 "sql.l"
{ return FTRIM; }
	YY_BREAK
case 263:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 344 "sql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 264:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 345 "sql.l"
{ return FDATE_SUB; }
	YY_BREAK
case 265:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 5;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 346 "sql.l"
{ return FUPPER; }//---3.25fzh---
	YY_BREAK
case 266:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 347 "sql.l"
{ return FCOALESCE; }
	YY_BREAK
case 267:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 348 "sql.l"
{ return FCAST; }
	YY_BREAK
case 268:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 7;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 349 "sql.l"
{ return FCONVERT; }
	YY_BREAK
/* 
         * peek ahead and return function if name(
         */
/* 
        ---2.18add aggrection functions
         */
case 269:
YY_RULE_SETUP
#line 356 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FCOUNT;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 360 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FSUM;
           yylval.strval = strdup(yytext);
           return NAME; }           
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 364 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FAVG;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 368 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FMIN;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 372 "sql.l"
{ int c = yyinput(); unput(c);
           if(c == '(') return FMAX;
           yylval.strval = strdup(yytext);
           return NAME; } 
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 377 "sql.l"
{ yylval.strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 379 "sql.l"
{ yylval.strval = strdup(yytext+1);
                          yylval.strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 276:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 383 "sql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 277:
#line 387 "sql.l"
case 278:
#line 388 "sql.l"
case 279:
#line 389 "sql.l"
case 280:
YY_RULE_SETUP
#line 389 "sql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 281:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 391 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 282:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 392 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 283:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 393 "sql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 396 "sql.l"
{ return ASSIGN; }
	YY_BREAK
/* comments */   
case 285:
YY_RULE_SETUP
#line 399 "sql.l"
;
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 400 "sql.l"
;
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 402 "sql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 403 "sql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 289:
/* rule 289 can match eol */
YY_RULE_SETUP
#line 404 "sql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 405 "sql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 290:
/* rule 290 can match eol */
YY_RULE_SETUP
#line 408 "sql.l"
/* white space */
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 409 "sql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 411 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3332 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(BTWMODE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1225 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1225 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1224);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 411 "sql.l"




